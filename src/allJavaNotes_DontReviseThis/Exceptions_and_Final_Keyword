Exception: unexpected or unwanted event

    two types of exception: checked and unchecked

    checked (unwanted): occurs during compile time, will give compile error immediately and has to be fix it immediately

    unchecked (unexpected): occurs during runtime

            RuntimeException class is the parent of all unchecked exception classes


Exception Handling:
        try&catch block    :  that used for handling exceptions permanently
        multi-catch block  :
        finally blocks     :
        throws Keyword 	   : Handles checked exceptions,in method signature, it's temporarily solution. Fast and cheap way. Less codes.
        throw keyword      : manually throwing exceptions, used for creating an exception.
        custom exception   :


1. try&catch blocks: handles the exception permanently

				try{
					exception code
				}catch(ExceptionClass e){
						e.getMessage("add your message to catch easily")
				}

				 getMessage(): gets the exception message

2.multi-catch block: parent exception class cannot be placed before child exception class

				Parent exception class can handle any child exceptions

				All exception classes that are extending RunTimeException are unchecked exception

				All exception classes that are not extending RunTimeException are checked exception


3.finally block: always gets executed, even if the exception is not handled
						not mandatory


4. throws keyword: used for handling checked exception. indicates that method throws an exception
				MUST be used in method signature

				handles the exception temporary

				the caller of the method is responsible to handle the exception


5.throw keyword: manually throwing an exception, does not handle any exception, used for creating an exception.

		object: new ExceptionClass();
		throw:
			throw objectOfException


6.Custom Exceptions:

    how to create custom unchecked exception?
		A: by extending RunTimeException Class

	how to create custom checked exception?
		A: by extending Exception class


        Practice examples: Look day53
        1. BreakTimeException
        2. InvalidBrowserException




final keyword: constant, cannot be changed

		Can only be applicable to:
				1. variable: cannot be changed
							 cannot be reassigned

				2. methods: implementation cannot NEVER be changed
						 	cannot be overrided
						 	can be overloaded

						 	Constructor cannot be final

				3. class: cannot be extended
						  cannot be super class (parent)
						  can be sub class (child)


what methods cannot be override: final, static, private


final vs finally
