
3. OOP
Abstraction: Focuses on the method, hiding the implementation.
            Focuses on the implementation of the method mostly, focusing on the essentials in the methods.
   			hiding the implementation (details) of the methods, focusing on essentials, without worrying about the details.
   			we only know what it does, but we dont know how it's done.
   			basically result is all that matters without worrying about the details
abstraction:
           abstract method
           abstract class
           interface

   Ex1:
   	shape: not concrete ==> abstract
   		area();

   	circle:
   		attributes: r
   		area():
   			r*r*PI

   	square
   		attributes: a
   		area():
   			a*a

   	rectangle
   		attributes: w, l
   		area():
   			w*l

   	triangle
   		attributes: b, h
   		area():
   			b*h*0.5


   Ex2:

   	Car: abstract
   		start();

   	BMW
   		start(): push start button

   	Tesla
   		start(): voice control

   	Toyota
   		start(): Insert the key

   	Jeep
   		start(): jump start


   1. abstract method: without body
                    a method without implementation (does not have body)
   					meant to be overridden ( CANNOT BE final, static, private)

   			Access-Modifier  abstract  Return_type   methodName(Parameter);
   			(none private)    MUST		MUST

   			public abstract double area();

   how we achieve abstraction:
   		abstract method

   		there are ONLY two ways:
   				1. abstract class
   				2. interface


   1. abstract class: not concrete, cannot create an object, Object MUST be in concrete class.
   mean to be extended (final)
   class can extend one abstract class
   meant to be super class (cannot be final class, because final class is meant to be sub class ONLY)
   					meant to be extended(final),
   					MUST be able to inherit


   Ex1:
       shape: not concrete ==> abstract
           area();

       circle: name
           attributes: r
           area():
               r*r*PI

       square: name
           attributes: a
           area():
               a*a
       rectangle
           attributes: w, l
           area():
               w*l
       triangle
           attributes: b, h
           area():
               b*h*0.5
   Abstraction:
           1. shape
           2. animal
           3. car

           4. phone

   IS A relation:

               class extends class

               class implements interface

               interface extends interface

               class extends class implements interface(s)


   abstract class vs regular class:

   	regular class cannot have:
   				abstract methods

   	abstract class cannot have:
   				final
   				object

   	abstract class can have: everything that regular class can have + abstract methods




   2. Interface (not a class): blue print class. specifies the behaviours or action the class should implement
           more like a contract, if the class needs we can give it to, if not we dont have to

           abstract class : 100

           subclass1: 100 (mandatory)..

           subclass2: 100 (mandatory)..


   ex1: Shapes task
       interface Volume:
               hasVolume = true;
               calculateVolume();

       abstract class Shape:
            calculateArea();
            calculatePerimeter();


       Square: extends Shape
            calculateArea(){ }
            calculatePerimeter(){ }


       Rectangle: extends Shape
            calculateArea(){ }
            calculatePerimeter(){ }


       Cylinder: extends Shape implements Volume
            calculateArea(){}
            calculatePerimeter(){}
            calculateVolume(){}


       Cube: extends Shape implements Volume
            calculateArea(){}
            calculatePerimeter(){}
            calculateVolume(){}


       Circle: extends Shape
            calculateArea();
            calculatePerimeter();

    Ex2:
       Interface flyable:
                fly();

       Interface swimmable:
                 swim();

       Interface Playable:
                   play();

       Abstract class Animal:
               eat();
               drink();

       Dolphin: extends Animal implements swimmable, playable
            eat(){}
            drink(){}
            play(){ }
            swim(){}

       Lion: extends Animal
           eat(){}
           drink(){}

       Duck: extends Animal implemnts flyable, swimmable, Playable
            eat(){}
            drink(){}
            fly(){}
            swim(){}
            play(){}

   Ex3:
       Interface AutoPilot:
               autoPilot();

       Interface AutoPark:
                autoPark();

       abstract class Car:
               brand, model, year, color
           start();
           driver();

       Toyota: extends Car
            brand, model, year, color
            start(){}
            driver(){}

       Lexus: extends Car implements AutoPark
            brand, model, year, color
           start(){}
           driver(){}
           autoPark(){}

       Tesla: extends Car extends  implements AutoPilot, AutoPark
            brand, model, year, color
           start(){}
           driver(){}
           autoPilot(){}
           autoPark(){}


   class:
       public class ClassName{

       }

       methods and variables

   interface:
       public interface Interfacename{

       }

       methods & variables
           But not all


   why do we need interface?
       A class can extend one class (extends)
       A class can implement multiple interfaces (implements)

   what we can have in interface? ( by default, everything is public)
       variables: public static final (by default )

       methods: static methods
                abstract method (abstract keyword is not mandatory)
                default method


   what we cannot have in interface?
   we cannot have:
                   instance variables
                   instance methods
                   Constructor
                   Blocks



   Interface vs Abstract class: both of the are used for achieving abstraction
                                both meant to be inherited
                                both cannot be final
                                both cannot create object


                       abstract class: instance variables
                                       static variables
                                       Constructor
                                       static block
                                       instance methods
                                       static methods
                                       abstract method
                                       all access modifiers

                                       a class can extend one abstract class


                       Interface: static (by default it's final)
                                   static methods
                                   abstract method
                                   public

                                   we can eliminate the unnecessary implementations to sub class

                                   a class can implements multiple interfaces


extends vs implements
   							class   implements  interface
   							class   extends     class
   							interface  extends    interface
   							class    extends   class    implements     interface

   							class   implements  interface1, interface2 ....


   --------------------------------------------------

3. Abstraction: it is process of hiding implementation details and only showing the functionality to the user.
Abstraction focus on what the object does instead of how it does. It is achieved by using Abstract class and Interface.
 abstract methods (methods without body, cannot be static and final), interface must implemented and abstract
  classes must be extended by regular classes in order to achieve abstraction ( because abstract methods
  can only be exist in abstract class and interface). A class can implement multiple interfaces,
   but it can extend only single abstract class.

Ex: In my framework I have achieve abstraction by using collections or Map, because it’s all interface.
 Most of the cases I come across using List. If we want to access elements frequently by using index,
 List is a way to go. ArrayList provides faster access if we know index.
 If we want to store elements and want them to maintain an order, List is a better choice.

        i)List<String> webs=driver.getWindowHandles();
        =>create a list first to store web URLs in list

        ii)findElements evaluates multiple elements so therefore will assigned to List <WebElement>

        iii)To handle dynamic elements store it in the list and identify by index:
        List<WebElement> all=driver.findElements(By.tagname(“”)); (or other locators).

 WebDriver
   			get(URL);

   		chrome: get(URL){ }
   		firefox: get(URL){ }
   		edge: get(URL){ }
   		ie: get(URL){ }
   		safari: get(URL){ }

   		interface downloadable:
   					download();

   			interface AppleApp extends downloadable{

   			}


   			interface AndroidApp extends downloadable{

   			}


   			class Iphone extends Phone implements AppleApp{

   			}

   			class Samsung extends Phone implemnts AndroidApp{

   			}


       			interfaces or abstract class i have used:
   					WebElement
   					WebDriver
   					By
   					Alert
   					List
   					...
