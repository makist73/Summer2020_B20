String:

charAt()
length()
concat()
toLowerCase()
toUpperCase()
trim()
substring()
replace()
replaceFirst()
indexOf()
lastIndexOf()
isEmpty()
equals()
equalsIgnoreCase()
contains()
startsWith()
endsWith()

String is sequneces of characters, it is immutable object, once the object is created we cannot modify it, cannot change.
each charcater in string has representive number called index number starts from zero
							String str = "Cybertek12 $"
							// index:     0123456789...

							import PackageName.ClassName;
String class: presented in "java.lang" import java.lang.String;
			any class in "java.lang" package will be imported automatically

1. object, there are ONLY two ways we can create string object:
	1. String literal
		String str = "Cybertek"; goes to String pool
String pool: a special memory location for ALL string literals.
	2. by new keyword:
		String str1 = new String("Cybertek");     in heap memory

        String str2 = new String("Cybertek");    in heap memory

                     2 objects created in heap

java heap: memory location in java where all the objects will be saved at

		 StringBuilder & StringBuffer: mutable objects
                		Builder: not thread-safe
                		Buffer: thread-safe
String methods:
		charAt(index): returns the char at the given index. char

		length(): returns the total number of the character. returns it as int

		concat(str): concatenation, concates the given string to the string. returns string

			"Cybertek".concat(" School") ==> "Cybertek School"

		toLowerCase(): creates the lowercase version of the string, returns new String

		toUpperCase(): creates the uppercase version of the string, returns new String

		trim(): removes the unused space (white space). returns new string
					will not trim the spaces between words
		substring(): creates the subString of the String

1. substring(beg index, ending index): cerates the substring from the given beginning index till ending index (ending index will be excluded)

				"Cybertek"

2. substring(beg idex): creates substring from the given beginning index till end of String
	"Muhtar".substring(1); ==>uhtar
replace(old value, new value): new value will be replaced with all the old values. returns new string

        String str1 = "I like to learn Java, Java is cool"
         String str2 =   str1.replace("Java", "C#");  // "I like to learn C#, C# IS cool"


     replaceFirst(oldValue, newValue): replaces the first occured value with new value. returns new String

        String str = "Java is fun, Java is cool"
            str.replaceFirst("Java", "C#") ==>  C# is fun, Java is cool



    indexOf(value): returns the index number of first occured character. as an int

        String str = "Cybertek";
                str.indexOf("r") ==> 4

    lastIndexOf(value): returns the index number of last occured character. as an int

    isEmpty(): checks if the string is empty. returns boolean
                String name = "Muhtar";
                        name.isEmpty(); ==> false
                        !name.isEmpty(); ==> true

    equals(str): checks if the string has same text with the given string. returns boolean
                CANNOT ignore the case sensitivity

    equalsIgnoreCase(str): checks if the string has same text with the given string. returns boolean
                    CAN IGNORE THE CASE SESITIVITY

    contains(str): checks if the given str is contained in the string or not. returns boolean

    startsWith(str): checks if the string is started with the given str. returns boolean

    endsWith(str): checks if the string is ended with the given str. returns boolean
